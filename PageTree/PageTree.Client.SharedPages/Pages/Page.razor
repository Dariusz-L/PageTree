@inherits ComponentBase
@page "/"
@using Common.Basic.Collections
@using Common.Basic.Maths;
@using PageTree.App
@using PageTree.App.Pages.Queries
@using PageTree.App.Practice.Queries
@using PageTree.Domain
@using System.Numerics;
@inject HttpClient Http

<PageTitle>PageTree</PageTitle>

<div class="main">
    <p class="page-path">
        @if (_vm.Path.Length == 0)
        {
            <i>--no parent--</i>
        }

        <div class="page-path-contents">
            @for (int i = 0; i < _vm.Path.Length; i++)
            {
                var pathIdentity = _vm.Path[i];
                <button class="page-path-button" @onclick="@((args) => LoadPage(pathIdentity.ID))">
                    @pathIdentity.Name
                    @if (i < _vm.Path.Length - 1)
                    {
                        <span>&nbsp;/&nbsp;</span>
                    }
                </button>
            }
        </div>
    </p>
    <div>
        @if (string.IsNullOrEmpty(_vm.SignatureIdentity.ID))
        {
            <i class="signature-text">--no signature--</i>
        }

        <span class="signature-text">@_vm.SignatureIdentity.Name</span>
        <h1>@_vm.Identity.Name</h1>
        <div class="page-property-list">
            @foreach (var property in _vm.Properties)
            {
                <button class="page-property-button" @onclick="@((args) => LoadPage(property.Identity.ID))">
                    <div class="item">
                        @property.Identity.Name
                        <ul class="item-menu">
                            <li class="item-menu-element">
                                <img class="item-menu-element-icon" src="/icons/fi-rs-treatment.png">
                                <div class="item-menu-element-tooltip">It does nothing for now.</div>
                            </li>
                            <li class="item-menu-element"><img class="item-menu-element-icon" src="/icons/fi-rs-treatment.png"></li>
                            <li class="item-menu-element"><img class="item-menu-element-icon" src="/icons/fi-rs-treatment.png"></li>
                        </ul>
                        <div class="item-menu-side">
                            <input type="checkbox">
                            <li class="item-menu-element"><img class="item-menu-element-icon" src="/icons/fi-rs-angle-right.png"></li>
                        </div>
                    </div>
                </button>
            }
        </div>
    </div>
    <div class="practice-choose-panel-parent">
        <button id="practice-button">PRACTICE</button>
        <div class="practice-choose-panel">
            @foreach (var practiceTactic in _vm.PracticeTactics)
            {
                <button class="practice-choose-panel-item" @onclick="@((args) => LoadPracticeCard(practiceTactic.ID))">@practiceTactic.Name</button>
            }

            @*<div class="practice-choose-panel-group">
            <b>Listening</b>
            <button class="practice-choose-panel-item">Radicals</button>
            <button class="practice-choose-panel-item">Words</button>
            </div>*@
        </div>
    </div>
    @if (!_practiceCards.IsNullOrEmpty())
    {
        <button class="outside-button-panel" @onclick=CloseCard></button>
        <div class="practice-panel">
            @*<div class="loader-panel">
        <div class="loader"></div>
        </div>*@
            <div class="practice-panel-card">
                <div class="practice-counter">@(_currentCardIndex + 1) / @_practiceCards.Length</div>

                <div class="practice-questions">
                    @foreach (var question in _practiceCards[_currentCardIndex].Questions)
                    {
                        <div class="practice-question">@question</div>
                    }
                </div>

                <div class="practice-answers">
                    @if (_answerVisible)
                    {
                        @foreach (var answers in _practiceCards[_currentCardIndex].Answers)
                        {
                            <div class="practice-answer">@answers</div>
                        }
                    }

                </div>

                <div class="practice-menu">
                    <button class="practice-menu-button" @onclick=@(() => NextCard(-1))><b>PREVIOUS</b></button>
                    <button class="practice-menu-button" @onclick=SwitchAnswerVisibility><b>ANSWER</b></button>
                    <button class="practice-menu-button" @onclick=@(() => NextCard(1))><b>NEXT</b></button>
                </div>
                @*<button class="practice-quit-button"><b>X</b></button>*@
            </div>
        </div>
    }
</div>

@code {
    [Inject] private IPagesService PagesService { get; set; }

    private PageVM _vm = new PageVM();
    private PracticeCardDTO[] _practiceCards = Array.Empty<PracticeCardDTO>();
    private int _currentCardIndex;
    private bool _answerVisible;

    protected override Task OnInitializedAsync() =>
        //Exts.TryOrCatchAccessTokenNotAvailableAndRedirect(RefreshPage);
        RefreshPage();

    private async Task RefreshPage() =>
        _vm = await PagesService.GetPage(string.Empty);

    private async Task LoadPage(string pageID)
    {
        _vm = await PagesService.GetPage(string.Empty);
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadPracticeCard(string tacticID)
    {
        _practiceCards = await PagesService.GetPracticeCards(_vm.Identity.ID, tacticID);
        _currentCardIndex = 0;

        await InvokeAsync(StateHasChanged);
    }

    private void CloseCard()
    {
        _practiceCards = Array.Empty<PracticeCardDTO>();

        InvokeAsync(StateHasChanged);
    }

    private void NextCard(int step)
    {
        if (step == 0)
            return;

        _answerVisible = false;
        _currentCardIndex.IncreaseBy(step, 0, _practiceCards.Length - 1, loop: false);

        InvokeAsync(StateHasChanged);
    }

    private void SwitchAnswerVisibility()
    {
        _answerVisible = !_answerVisible;

        InvokeAsync(StateHasChanged);
    }
}
