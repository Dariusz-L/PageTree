@using Common.Basic.Collections;
@using Corelibs.BlazorShared.UI;
@using Microsoft.JSInterop;
@using PageTree.Client.Shared.Pages
@inherits LayoutComponentBase
@inject NavigationManager Navigation

<div class="page">
    @if (IsJapaneseArcanaHome())
    {
        <main>
            <article class="main-content">
                <Index_JA>
                    <BackgroundAndContent @ref=@_backgroundOwner>
                        <JAHomeContent/>
                    </BackgroundAndContent>
                </Index_JA>
            </article>
            @{
                var links = new string[][]
                {
                    new[] {"Learn", "learn" },
                    new[] {"Contact", "contact" },
                };
            }
            <div>
                <TopOrSideMenu Links="@links" OnCollapseChanged="@OnCollapseChanged">
                    <Navbar>
                        <HomeNavbar Links="@links"/>
                    </Navbar>
                </TopOrSideMenu>
            </div>
        </main>
    }
    else
    @if (IsJapaneseArcanaLearn())
    {
        <main>
            <article class="main-content">
                <Index_JA_Learn>
                    <BackgroundAndContent @ref=@_backgroundOwner Opacity=0.1f>
                        <PageContent Left=@context.Item1 Top=@context.Item2 />
                    </BackgroundAndContent>
                </Index_JA_Learn>
            </article>
             @{
                var links = new string[][]
                {
                    new[] {"Pages", "/learn/pages" },
                };
            }
            <div>
                <TopOrSideMenu Links="@links" SideOnly=true OnCollapseChanged="@OnCollapseChanged">
                    <Navbar>
                        <HomeNavbar Links="@links" />
                    </Navbar>
                </TopOrSideMenu>
            </div>
        </main>
    }
    else
    @if (IsPageTreeLearn())
    {
        <PTNavMenu />
        <main>
            <div class="top-row"><PTLearnNavBar /></div>
            <article class="main-content pl-5">
                @Body
            </article>
        </main>
    }
    else
    @if (IsPageTreeHome())
    {
        <main>
            <div class="top-row"><PTHomeNavBar /></div>
            <article class="main-content pl-5">
                @Body
            </article>
        </main>
    }

    <LoadingScreen/>
</div>

@code {
    [Inject] private IJSRuntime _jsRuntime { get; set; }

    private IBgAndContent _backgroundOwner;

    private readonly static string LearnRoute = "learn";
    private readonly static string PageTreeRoute = "pagetree";

    private string _baseUri;
    private string _currentUri;

    protected override void OnInitialized()
    {
        _baseUri = Navigation.BaseUri;
        _currentUri = Navigation.Uri;
        Navigation.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_backgroundOwner == null)
            return;

        int left = 0;
        int top = 60;
        try
        {
            var menuRect = await _jsRuntime.GetRect("menu-topmost");
            left = (int) menuRect.Width;
        } catch(Exception) {}
        try
        {
            var topRect = await _jsRuntime.GetRect("navbar-menu-parent");
            top = (int) topRect.Height;
        }
        catch (Exception) { }

        _backgroundOwner.Resize(left, top);
    }

    private async Task OnCollapseChanged(bool collapsed)
    {
        await InvokeAsync(StateHasChanged);
    }

    private bool IsJapaneseArcanaHome() =>
    _currentUri == _baseUri;

    private bool IsJapaneseArcanaLearn() =>
        _currentUri.ToLower().StartsWith($"{_baseUri}{LearnRoute}");

    private bool IsPageTreeHome() =>
        _currentUri.ToLower().StartsWith($"{_baseUri}{PageTreeRoute}");

    private bool IsPageTreeLearn() =>
        _currentUri.ToLower().StartsWith($"{_baseUri}{PageTreeRoute}/{LearnRoute}");

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        _baseUri = Navigation.BaseUri;
        _currentUri = args.Location;
        InvokeAsync(StateHasChanged);
    }
}
