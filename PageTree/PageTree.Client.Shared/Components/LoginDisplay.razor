@inject IAuthUser _authUser
@inject NavigationManager _navigation
@inject UsersService _usersService

<div class="login-display">
    @if (_isSignedIn)
    {
        @*<p>Hello, </p>@_authUser.Name*@
        <button class="button" @onclick="_authUser.SignOut">Log out</button>
    }
    else
    {
        <button class="button" @onclick="OnSignIn">Log in</button>
    }
</div>

@code {
    private bool _isSignedIn = false;

    protected override async Task OnInitializedAsync()
    {
        _isSignedIn = await _authUser.IsSignedIn();
        _authUser.OnAuthenticatedStateChanged += OnAuthenticatedStateChanged;
    }

    private async void OnAuthenticatedStateChanged(bool isSignedIn)
    {
        if (isSignedIn)
            _navigation.NavigateTo(_navigation.Uri, forceLoad: true);
        else
            _navigation.NavigateTo("/");

        _isSignedIn = await _authUser.IsSignedIn();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSignIn()
    {
        await _authUser.SignIn();
        await _usersService.CreateUser();
    }
}
