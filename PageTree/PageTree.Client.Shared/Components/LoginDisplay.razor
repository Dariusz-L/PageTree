@inherits LayoutComponentBase

@using Common.Basic.Collections;
@using Newtonsoft.Json;
@using PageTree.App.UseCases.Users.Commands;
@using global::PageTree.Client.Shared.Services;
@using Blazored.LocalStorage;
@using System.Linq;

@inject IAuthUser _authUser
@inject NavigationManager _navigation

<div class="login-display @Class">
    @if (_isSignedIn)
    {
        @*<p>Hello, </p>@_authUser.Name*@
        <a class="button @ButtonClass" @onclick="OnSignOut">Log out</a>
    }
    else
    {
        <a class="button @ButtonClass" @onclick="OnSignIn">Log in</a>
    }
</div>

@code {
    [Inject] private ICommandExecutor Commands { get; set; }
    [Inject] private ILocalStorageService LocalStorage { get; set; }

    [Parameter] public string Class { get; set; } = new("");
    [Parameter] public string ButtonClass { get; set; } = new("");
    private bool _isSignedIn = false;

    public async Task<bool> ClearTokenIfExpired()
    {
        var keys = (await LocalStorage.KeysAsync()).Where(k =>
            k.Contains("telemetry") ||
            k.Contains("pagetree.b2clogin.com")).ToArray();

        var accessTokenKey = keys.FirstOrDefault(k => k.Contains("accesstoken"));
        if (accessTokenKey.IsNullOrEmpty())
        {
            var telemetryKey = keys.FirstOrDefault(k => k.Contains("telemetry"));
            if (!telemetryKey.IsNullOrEmpty())
                await LocalStorage.RemoveItemAsync(telemetryKey);

            return false;
        }

        var accessTokenObject = await LocalStorage.GetItemAsStringAsync(accessTokenKey);
        if (accessTokenObject.IsNullOrEmpty())
            return false;

        var accessTokenObjectDict = JsonConvert.DeserializeObject<Dictionary<string, string>>(accessTokenObject);
        if (accessTokenObjectDict.IsNullOrEmpty())
            return false;

        var accessTokenStr = accessTokenObjectDict["secret"];
        if (accessTokenStr.IsNullOrEmpty())
            return false;

        var accessToken = new JwtSecurityToken(accessTokenStr);
        var isExpiredToken = accessToken.IsExpiredToken(DateTime.UtcNow);
        if (!isExpiredToken)
            return false;

        await LocalStorage.RemoveItemsAsync(keys);

        return true;
    }

    public async Task<bool> ClearToken()
    {
        var keys = (await LocalStorage.KeysAsync()).Where(k =>
            k.Contains("telemetry") ||
            k.Contains("pagetree.b2clogin.com")).ToArray();

        await LocalStorage.RemoveItemsAsync(keys);

        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        LoadingScreen.Enabled = true;

        var isExpiredToken = await ClearTokenIfExpired();
        if (isExpiredToken)
        {
            _navigation.NavigateTo(_navigation.BaseUri, forceLoad: true);
            // show popup message to user
        }
        else
            _isSignedIn = await _authUser.IsSignedIn();

        _authUser.OnAuthenticatedStateChanged += OnAuthenticatedStateChanged;

        if (_isSignedIn)
        {
            await Commands.Execute<CreateUserCommand>();
        }
        LoadingScreen.Enabled = false;
    }

    private async void OnAuthenticatedStateChanged(bool isSignedIn)
    {
        LoadingScreen.Enabled = false;
        _isSignedIn = await _authUser.IsSignedIn();

        if (isSignedIn)
        {
            await Commands.Execute<CreateUserCommand>();
            //_navigation.NavigateTo(_navigation.Uri, forceLoad: true);
        }
        else
        {
            _navigation.NavigateTo("/", forceLoad: true);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSignIn()
    {
        LoadingScreen.Enabled = true;
        await _authUser.SignIn();
    }

    private async Task OnSignOut()
    {
        LoadingScreen.Enabled = true;
        await ClearToken();
        await _authUser.SignOut();
        OnAuthenticatedStateChanged(false);
    }
}
