@using PageTree.App.UseCases.Users.Commands;
@using global::PageTree.Client.Shared.Services;
@inject IAuthUser _authUser
@inject NavigationManager _navigation

<div class="login-display">
    @if (_isSignedIn)
    {
        @*<p>Hello, </p>@_authUser.Name*@
        <a class="button @Class" @onclick="_authUser.SignOut">Log out</a>
    }
    else
    {
        <a class="button @Class" @onclick="@(async () => await OnSignIn())">Log in</a>
    }
</div>

@code {
    [Inject] private ICommandExecutor Commands { get; set; }

    [Parameter]
    public string Class { get; set; } = new("");
    private bool _isSignedIn = false;

    protected override async Task OnInitializedAsync()
    {
        _isSignedIn = await _authUser.IsSignedIn();
        _authUser.OnAuthenticatedStateChanged += OnAuthenticatedStateChanged;

        if (_isSignedIn)
        {
            await Commands.Execute<CreateUserCommand>();
        }
    }

    private async void OnAuthenticatedStateChanged(bool isSignedIn)
    {
        if (isSignedIn)
        {
            await Commands.Execute<CreateUserCommand>();
            _navigation.NavigateTo(_navigation.Uri, forceLoad: true);
        }
        else
            _navigation.NavigateTo("/");

        _isSignedIn = await _authUser.IsSignedIn();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSignIn()
    {
        await _authUser.SignIn();
    }
}
